#ifndef _MYSQL_DATA_ADAPTER_H_
#define _MYSQL_DATA_ADAPTER_H_

#include "sql_include.h"

class Command;
class DataTable;
class DataRow;
class DataReader;
class DataAdapter
{
public:
	DataAdapter(const std::shared_ptr<Command>& cmd);
	~DataAdapter();

public:
	void AddRows(const std::shared_ptr<DataReader>& reader);
	void AddRows(const std::vector<std::shared_ptr<DataRow> >& new_rows);
	void AddRow(const std::shared_ptr<DataRow>& new_row);

	void RemoveRows(int32_t primary_key);
	std::shared_ptr<DataRow> CreateNewDataRow();

	bool Update();
	bool Insert();
	bool Delete();

private:
	int32_t GetUniqueKeyIndex();

private:
	bool m_inited_header;
	std::shared_ptr<Command> m_cmd;
	std::shared_ptr<DataTable> m_table;
};

/*

// GENERATED BY TOOL
clss User
{
public:
	User();
	~User();

	std::string GetName(int id);
	void SetName(int id, const std::string& name);

	int GetAge(int id);
	void SetAge(int id, int age);

public:
	// operate the mysql table
	void InsertRow(const UserDataRow& row);
	void DeleteRow(int id);

	// udpate the modified of the user table
	void Update();

protected:
	// add/remove row from the instance of user class.
	void RemoveRow(int id);
};

struct UserDataRow
{
	int id;
	std::string name;
	int age;
	int weight;
};

=====asyn loading user data=======
id = 10000;

select * from user where id = 1000
DataReader reader = cmd->Execute();
user->AddRows(reader);

select * from task where id = 1000;
DataReader reader = cmd->Execute();
task->AddRows(reader);

select * from prop where id = 1000;
DataReader reader = cmd->Execute();
prop->AddRows(reader);

====== asyn unload user data =======
user->Remove

====== =======
#define DOTA_USER_ID		"id"
#define DOTA_USER_NAME		"name"
#define DOTA_USER_AGE		"age"

std::shared_ptr<DataRow> new_row = m_table->CreateNewDataRow();
new_row->SetItem(DOTA_USER_ID, 100);
new_row->SetItem(DOTA_USER_NAME, "name");
user->addRow(new_row);

user->Insert();
user->Update();
user->Delete();

*/

#endif // _MYSQL_DATA_ADAPTER_H_